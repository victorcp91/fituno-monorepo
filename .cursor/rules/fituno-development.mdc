---
description: 
globs: 
alwaysApply: true
---
# Fituno - Regras de Fluxo de Desenvolvimento

---
description: Guia obrigat√≥rio para fluxo de desenvolvimento, controle de tarefas e versionamento no projeto Fituno
globs: FITUNO_TASKS.md, .cursor/rules/*.mdc, apps/**, packages/**
alwaysApply: true
---

- **O agente deve atuar como um desenvolvedor experiente, seguindo rigorosamente todas as regras dos arquivos em `.cursor/rules/`**
  - Antes de iniciar qualquer implementa√ß√£o, revisar e aplicar todas as regras relevantes
  - Consultar regras espec√≠ficas para estrutura, testes, commits, seguran√ßa, etc.

- **Controle de Tarefas com FITUNO_TASKS.md**
  - Sempre verificar o arquivo [FITUNO_TASKS.md](mdc:FITUNO_TASKS.md) para identificar a pr√≥xima task/subtask pendente
  - Iniciar sempre da task/subtask de maior prioridade ainda n√£o conclu√≠da
  - Atualizar o status da task/subtask para "üöß In Progress" ao iniciar e "‚úÖ Done" ao finalizar
  - Ap√≥s finalizar uma subtask, atualizar imediatamente o status no arquivo e commitar a altera√ß√£o

- **Branches e Versionamento**
  - Ao iniciar uma task/subtask, criar uma nova branch com nome descritivo (ex: `feat/task-5.1-nextjs-setup`)
  - Todos os avan√ßos devem ser commitados na branch correspondente, preferencialmente ao finalizar cada subtask
  - O commit deve seguir o padr√£o Conventional Commits, incluindo o ID da task/subtask no escopo
  - Exemplo: `feat(task-5.1): configura Next.js com TypeScript`

- **Pull Requests**
  - Ao finalizar uma task completa (todas as subtasks conclu√≠das), abrir um Pull Request para revis√£o
  - O PR deve referenciar todas as subtasks implementadas e incluir checklist de crit√©rios de aceite

- **Checklist de Finaliza√ß√£o**
  - [ ] Implementa√ß√£o completa da subtask
  - [ ] Testes ‚â• 80% cobertura
  - [ ] Lint sem erros
  - [ ] Build funcionando
  - [ ] Commit realizado
  - [ ] Status atualizado em [FITUNO_TASKS.md](mdc:FITUNO_TASKS.md)
  - [ ] PR aberto (ao concluir task major)

- **Exemplo de Fluxo**
  1. Verificar pr√≥xima subtask pendente em [FITUNO_TASKS.md](mdc:FITUNO_TASKS.md)
  2. Criar branch: `git checkout -b feat/task-5.1-nextjs-setup`
  3. Implementar funcionalidade e testes
  4. Commitar: `git commit -m "feat(task-5.1): configura Next.js com TypeScript"`
  5. Atualizar status da subtask para "‚úÖ Done" em [FITUNO_TASKS.md](mdc:FITUNO_TASKS.md) e commitar
  6. Ao concluir todas as subtasks da task major, abrir PR

- **Observa√ß√µes**
  - Nunca prossiga para pr√≥xima task/subtask sem atualizar status e commitar
  - Sempre siga as regras de estrutura, testes e commits do projeto
  - O agente deve ser proativo em corrigir desvios do fluxo e alertar sobre pend√™ncias

- **Aten√ß√£o ao Escopo da Task/Subtask**
  - O agente deve se ater estritamente √† task ou subtask em andamento, sem implementar funcionalidades, melhorias ou altera√ß√µes fora do escopo definido na descri√ß√£o da task/subtask
  - Qualquer sugest√£o de melhoria ou ajuste fora do escopo deve ser registrada para avalia√ß√£o futura, nunca implementada imediatamente
