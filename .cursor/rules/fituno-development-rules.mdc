---
description: 
globs: 
alwaysApply: false
---
# Fituno - Regras de Desenvolvimento

## üìã Stack Tecnol√≥gico

### Web App (trainer-app)
- **Framework:** Next.js 15 com App Router e React Server Components
- **Linguagem:** TypeScript
- **UI:** shadcn/ui + Tailwind CSS
- **Testes:** Vitest + React Testing Library
- **Estrutura:** [apps/trainer-app/](mdc:apps/trainer-app) conforme [monorepo.md](mdc:docs/monorepo.md)

### Mobile App (client-app)
- **Framework:** Expo SDK (latest) + React Native
- **UI:** React Native Paper
- **Testes:** Jest + React Testing Library
- **Estrutura:** [apps/client-app/](mdc:apps/client-app) conforme [monorepo.md](mdc:docs/monorepo.md)

### Pacotes Compartilhados
- **Gerenciamento:** Yarn Workspaces conforme [package.json](mdc:package.json)
- **Tipos:** `@fituno/types` em [packages/types/](mdc:packages/types)
- **Utilit√°rios:** `@fituno/utils` em [packages/utils/](mdc:packages/utils)
- **Servi√ßos:** `@fituno/services` (Supabase & Stripe) em [packages/services/](mdc:packages/services)
- **Constantes:** `@fituno/constants` em [packages/constants/](mdc:packages/constants)

## üîÑ Fluxo de Trabalho

### 1. Sele√ß√£o de Tarefas
```bash
# Usar comando de tarefas para selecionar pr√≥xima do backlog
/tasks
```

### 2. Desenvolvimento
- Gere c√≥digo **E** testes unit√°rios completos
- Execute `pnpm test` at√© todos os testes passarem
- Siga as diretrizes de c√≥digo abaixo

### 3. Commit & Push
```bash
# Ap√≥s implementar cada tarefa
git add -A
# Gerar commit usando Conventional Commits (ver template abaixo)
# Incluir ID da task no scope se existir
git push
```

### 4. Frequ√™ncia
- Push ap√≥s cada task OU a cada 2-3 commits

## üìù Diretrizes de C√≥digo

### Estrutura & Imports
- **SEMPRE** respeite aliases `@fituno/...` conforme [monorepo.md](mdc:docs/monorepo.md)
- **SEMPRE** siga estrutura de pastas documentada em [monorepo.md](mdc:docs/monorepo.md)
- Imports de pacotes compartilhados:
  ```typescript
  import { WorkoutPlan } from "@fituno/types";
  import { formatCurrency } from "@fituno/utils";
  import { supabase } from "@fituno/services";
  ```

### Valida√ß√£o & API
- **OBRIGAT√ìRIO:** Valida√ß√£o de entrada com Zod
- **API Routes:** Sempre em `app/api/**/route.ts` (Next.js App Router)
- **Tipos:** Usar tipagens de `@fituno/types` como fonte da verdade

### Componentes UI
#### Web (trainer-app)
- **UI Library:** shadcn/ui + Tailwind CSS
- **Localiza√ß√£o:** [apps/trainer-app/components/](mdc:apps/trainer-app/components)
- **SEMPRE** incluir story de teste

#### Mobile (client-app)  
- **UI Library:** React Native Paper
- **Localiza√ß√£o:** [apps/client-app/components/](mdc:apps/client-app/components)
- **SEMPRE** incluir story de teste

### Testes
- **Cobertura m√≠nima:** 80% branch coverage
- **Ferramentas:** Vitest/RTL (web) ou Jest/RTL (mobile)
- **OBRIGAT√ìRIO:** Testar edge cases
- **Localiza√ß√£o:** Pasta `tests/` por dom√≠nio

## üöÄ Templates de Prompts R√°pidos

### Componente Next.js 15
```
Gere um componente Next.js 15 responsivo usando Tailwind + shadcn/ui que [FUNCIONALIDADE]. 
Inclua testes Vitest/RTL e siga estrutura de [apps/trainer-app/](mdc:apps/trainer-app).
```

### API Route Segura
```
Escreva um route.ts para /api/[ENDPOINT] com:
- Valida√ß√£o Zod
- Autentica√ß√£o JWT 
- Rate limiting (5 req/min)
- Tipos de @fituno/types
- Estrutura Next.js 15 App Router
```

### Tela Expo
```
Crie uma screen Expo/React Native chamada [NOME] com:
- React Native Paper components
- Navega√ß√£o stack
- Formul√°rio controlado com valida√ß√£o Zod
- Teste Jest inicial
- Estrutura de [apps/client-app/](mdc:apps/client-app)
```

### Debug Hidrata√ß√£o
```
Estou recebendo 'hydration mismatch' nesta p√°gina Next.js. 
Explique causas comuns e corrija passo a passo usando Next.js 15 + RSC.
```

### Testes Unit√°rios
```
Escreva testes [Vitest/Jest]/RTL para este componente:
- Cubra edge-cases
- Alcance 80% branch coverage
- Use mocks apropriados para @fituno/services
- Siga padr√µes do projeto
```

### Mensagem de Commit
```
Com base no diff a seguir, gere um commit convencional:
- Formato: tipo(scope): descri√ß√£o
- Incluir ID da task no scope se existir
- Body detalhado se necess√°rio
- Seguir Conventional Commits
```

## ‚úÖ Definition of Done

### Crit√©rios Obrigat√≥rios
- [ ] Crit√©rios de aceite da task atendidos
- [ ] Lint sem erros (`yarn lint`)
- [ ] Testes passando (`pnpm test`)
- [ ] Cobertura de testes ‚â• 80%
- [ ] Valida√ß√£o Zod implementada (quando aplic√°vel)
- [ ] Componentes UI seguem padr√µes (shadcn/ui ou RN Paper)
- [ ] Commit criado com Conventional Commits
- [ ] Push executado

### Estrutura de Arquivos
- Respeitar organiza√ß√£o por dom√≠nio em `features/`
- Componentes UI espec√≠ficos por app
- Hooks compartilh√°veis em `packages/utils/hooks`
- Tipos globais em `packages/types`

## üîß Comandos √öteis

```bash
# Desenvolvimento
yarn dev:trainer    # Iniciar trainer-app (web)
yarn dev:client     # Iniciar client-app (mobile)

# Build
yarn build:trainer  # Build trainer-app
yarn build:client   # Build client-app  

# Qualidade
yarn lint          # Lint todos os workspaces
yarn test          # Executar testes em todos os workspaces
```

## üìÅ Refer√™ncias Importantes

- **Estrutura completa:** [docs/monorepo.md](mdc:docs/monorepo.md)
- **Configura√ß√£o workspaces:** [package.json](mdc:package.json)
- **Trainer app:** [apps/trainer-app/](mdc:apps/trainer-app)
- **Client app:** [apps/client-app/](mdc:apps/client-app)
- **Tipos compartilhados:** [packages/types/](mdc:packages/types)
- **Utilit√°rios:** [packages/utils/](mdc:packages/utils)
- **Servi√ßos:** [packages/services/](mdc:packages/services)
- **Constantes:** [packages/constants/](mdc:packages/constants)
