---
description: 
globs: 
alwaysApply: false
---
# Fituno - Regras de Desenvolvimento

## üìã Stack Tecnol√≥gico

### Web App (trainer-app)
- **Framework:** Next.js 15 com App Router e React Server Components
- **Linguagem:** TypeScript
- **UI:** shadcn/ui + Tailwind CSS
- **Testes:** Vitest + React Testing Library
- **Estrutura:** [apps/trainer-app/](mdc:apps/trainer-app) conforme [monorepo.md](mdc:docs/monorepo.md)

### Mobile App (client-app)
- **Framework:** Expo SDK (latest) + React Native
- **UI:** React Native Paper
- **Testes:** Jest + React Testing Library
- **Estrutura:** [apps/client-app/](mdc:apps/client-app) conforme [monorepo.md](mdc:docs/monorepo.md)

### Pacotes Compartilhados
- **Gerenciamento:** Yarn Workspaces conforme [package.json](mdc:package.json)
- **Tipos:** `@fituno/types` em [packages/types/](mdc:packages/types)
- **Utilit√°rios:** `@fituno/utils` em [packages/utils/](mdc:packages/utils)
- **Servi√ßos:** `@fituno/services` (Supabase & Stripe) em [packages/services/](mdc:packages/services)
- **Constantes:** `@fituno/constants` em [packages/constants/](mdc:packages/constants)

## üîÑ Fluxo de Trabalho

### 1. Sele√ß√£o de Tarefas
```bash
# Usar comando de tarefas para selecionar pr√≥xima do backlog
/tasks
```

### 2. Desenvolvimento
- Gere c√≥digo **E** testes unit√°rios completos
- Execute `pnpm test` at√© todos os testes passarem
- Siga as diretrizes de c√≥digo abaixo

### 3. Commit & Push
```bash
# Ap√≥s implementar cada tarefa
git add -A
# Gerar commit usando Conventional Commits (ver template abaixo)
# Incluir ID da task no scope se existir
git push
```

### 4. Frequ√™ncia
- Push ap√≥s cada task OU a cada 2-3 commits

## üìã Gerenciamento de Tasks - FITUNO_TASKS.md

### Prioridade das Tasks por Aplicativo
**OBRIGAT√ìRIO:** Seguir ordem de prioridade definida em [FITUNO_TASKS.md](mdc:FITUNO_TASKS.md)

#### Trainer App (Web) - Ordem de Prioridade:
1. **Task 5:** Trainer Web App Foundation (5.1 ‚Üí 5.5)
2. **Task 7:** Plan & Subscription System (7.1 ‚Üí 7.4)
3. **Task 8:** Client Management System (8.1 ‚Üí 8.4)
4. **Task 9:** Anamnesis System - Trainer Side (9.1 ‚Üí 9.4)
5. **Task 11:** Workout Builder (11.1 ‚Üí 11.6)
6. **Task 14:** Chat System - Trainer Side (14.1 ‚Üí 14.4)
7. **Task 13:** Progress Tracking & Media - Trainer Side (13.1 ‚Üí 13.3)

#### Client App (Mobile) - Ordem de Prioridade:
1. **Task 6:** Client Mobile App Foundation (6.1 ‚Üí 6.5)
2. **Task 9:** Anamnesis System - Client Side (9.1 ‚Üí 9.3)
3. **Task 12:** Workout Execution (12.1 ‚Üí 12.4)
4. **Task 15:** Offline Support & Synchronization (15.1 ‚Üí 15.3)
5. **Task 17:** Media & Animation System (17.1 ‚Üí 17.3)
6. **Task 14:** Chat System - Client Side (14.1 ‚Üí 14.4)
7. **Task 13:** Progress Tracking & Media - Client Side (13.1 ‚Üí 13.3)
8. **Task 16:** Internationalization & Units (16.1 ‚Üí 16.2)
9. **Task 18:** Legal & Compliance (18.1 ‚Üí 18.2)

### Crit√©rios de Finaliza√ß√£o por Task
**OBRIGAT√ìRIO para cada subtask:**

#### 1. Implementa√ß√£o Completa
- [ ] Todos os pontos da subtask implementados
- [ ] C√≥digo segue diretrizes de arquitetura
- [ ] Imports corretos usando aliases `@fituno/*`
- [ ] Valida√ß√£o Zod onde necess√°rio

#### 2. Testes Obrigat√≥rios
- [ ] **Cobertura m√≠nima:** 80% branch coverage
- [ ] Testes unit√°rios para todos os componentes/fun√ß√µes
- [ ] Testes de integra√ß√£o para fluxos cr√≠ticos
- [ ] Edge cases cobertos conforme [FITUNO_TASKS.md](mdc:FITUNO_TASKS.md)
- [ ] Mocks apropriados para servi√ßos externos

#### 3. Valida√ß√£o de Qualidade
- [ ] `yarn lint` sem erros
- [ ] `yarn test` todos os testes passando
- [ ] Build da aplica√ß√£o funcionando (`yarn build`)
- [ ] Verifica√ß√£o manual dos crit√©rios de aceite

#### 4. Commit Obrigat√≥rio
```bash
# Formato espec√≠fico para tasks
git add -A
git commit -m "feat(task-[ID]): [descri√ß√£o da subtask]

- Implementa [funcionalidade espec√≠fica]
- Adiciona testes com [%] de cobertura
- [Outros detalhes relevantes]

Closes: Task [ID].[subtask]"
git push
```

### Bloqueadores de Progresso
**N√ÉO prosseguir para pr√≥xima task/subtask se:**
- [ ] Testes n√£o atingem 80% de cobertura
- [ ] Lint com erros n√£o resolvidos
- [ ] Build falhando
- [ ] Crit√©rios de aceite n√£o atendidos
- [ ] Commit n√£o realizado

### Templates de Verifica√ß√£o

#### Checklist de Subtask Conclu√≠da
```
‚úÖ Subtask [ID].[N] - [Nome]
- [ ] Implementa√ß√£o completa ‚úì
- [ ] Testes ‚â• 80% cobertura ‚úì  
- [ ] Lint sem erros ‚úì
- [ ] Build funcionando ‚úì
- [ ] Commit realizado ‚úì
- [ ] Push executado ‚úì
```

#### Comando de Verifica√ß√£o R√°pida
```bash
# Executar antes de commit
yarn lint && yarn test && yarn build
```

### Atualiza√ß√£o do FITUNO_TASKS.md
**OBRIGAT√ìRIO:** Manter o arquivo [FITUNO_TASKS.md](mdc:FITUNO_TASKS.md) atualizado como fonte da verdade do progresso.

#### 1. Atualiza√ß√£o de Status
**Ap√≥s concluir cada subtask:**
```markdown
# No arquivo FITUNO_TASKS.md, atualizar a coluna Status:
| ID  | Title                    | Status    | 
| --- | ------------------------ | --------- |
| 5.1 | Next.js Project Setup    | ‚úÖ Done   |
| 5.2 | ShadCN UI Integration    | üöß In Progress |
| 5.3 | App Router Configuration | ‚è≥ Pending |
```

#### 2. Identifica√ß√£o da Pr√≥xima Task
**Antes de iniciar nova task:**
- [ ] Verificar depend√™ncias atendidas
- [ ] Confirmar ordem de prioridade por aplicativo
- [ ] Atualizar status para "üöß In Progress"
- [ ] Documentar in√≠cio no arquivo

#### 3. Template de Atualiza√ß√£o
```markdown
## Task [ID] - [Nome da Task]
**Status:** ‚úÖ Conclu√≠da | **Data:** [DD/MM/YYYY]

### Subtasks Implementadas:
- ‚úÖ [ID.1] [Nome] - Implementado com [%] cobertura de testes
- ‚úÖ [ID.2] [Nome] - Implementado com [%] cobertura de testes
- ‚úÖ [ID.3] [Nome] - Implementado com [%] cobertura de testes

### Pr√≥xima Task: [ID+1] - [Nome]
**Depend√™ncias:** Todas atendidas ‚úÖ
**Prioridade:** [Alta/M√©dia/Baixa]
**App:** [Trainer/Client]
```

#### 4. Versionamento do Progresso
**A cada task major conclu√≠da, adicionar se√ß√£o:**
```markdown
---
## üìä Status do Projeto - [Data]

### Trainer App (Web):
- ‚úÖ Task 5: Foundation (5/5 subtasks)
- üöß Task 7: Subscription System (2/4 subtasks)
- ‚è≥ Task 8: Client Management (0/4 subtasks)

### Client App (Mobile):
- ‚úÖ Task 6: Foundation (5/5 subtasks)
- ‚è≥ Task 9: Anamnesis (0/3 subtasks)

### Pr√≥ximas Prioridades:
1. Task 7.3 - Checkout Flow (Trainer)
2. Task 9.1 - Form Renderer (Client)
---
```

#### 5. Comandos para Atualiza√ß√£o
```bash
# Ap√≥s concluir subtask
git add FITUNO_TASKS.md
git commit -m "docs(task-[ID]): atualiza status para conclu√≠da

- Marca subtask [ID].[N] como conclu√≠da
- Atualiza pr√≥xima task na sequ√™ncia
- Documenta progresso e cobertura de testes"
```

### Fluxo Completo de Task
**Sequ√™ncia obrigat√≥ria para cada subtask:**

1. **In√≠cio:**
   - [ ] Atualizar FITUNO_TASKS.md: status ‚Üí "üöß In Progress"
   - [ ] Commit da atualiza√ß√£o de status

2. **Desenvolvimento:**
   - [ ] Implementar funcionalidade
   - [ ] Escrever testes (‚â•80% cobertura)
   - [ ] Resolver lint e build

3. **Finaliza√ß√£o:**
   - [ ] Commit da implementa√ß√£o
   - [ ] Atualizar FITUNO_TASKS.md: status ‚Üí "‚úÖ Done"
   - [ ] Identificar pr√≥xima task na sequ√™ncia
   - [ ] Commit da atualiza√ß√£o final

4. **Valida√ß√£o:**
   - [ ] Verificar se todas as subtasks da task major est√£o conclu√≠das
   - [ ] Se sim: atualizar status da task major
   - [ ] Identificar pr√≥xima task major conforme prioridade

## üìù Diretrizes de C√≥digo

### Estrutura & Imports
- **SEMPRE** respeite aliases `@fituno/...` conforme [monorepo.md](mdc:docs/monorepo.md)
- **SEMPRE** siga estrutura de pastas documentada em [monorepo.md](mdc:docs/monorepo.md)
- Imports de pacotes compartilhados:
  ```typescript
  import { WorkoutPlan } from "@fituno/types";
  import { formatCurrency } from "@fituno/utils";
  import { supabase } from "@fituno/services";
  ```

### Valida√ß√£o & API
- **OBRIGAT√ìRIO:** Valida√ß√£o de entrada com Zod
- **API Routes:** Sempre em `app/api/**/route.ts` (Next.js App Router)
- **Tipos:** Usar tipagens de `@fituno/types` como fonte da verdade

### Supabase & Servi√ßos Externos
- **Acesso Supabase:** Dispon√≠vel via servidor MCP integrado ao agente
- **Ferramentas MCP:** Use as fun√ß√µes do Supabase diretamente quando necess√°rio
- **Database Operations:** Pode executar SQL, criar migra√ß√µes, gerenciar tabelas
- **Tipos TypeScript:** Pode gerar tipos automaticamente do schema
- **Branches:** Pode criar/gerenciar development branches
- **Edge Functions:** Pode deployar fun√ß√µes serverless
- **Storage:** Pode gerenciar arquivos e media

#### Uso das Ferramentas MCP Supabase
```typescript
// Exemplo de acesso direto via MCP durante desenvolvimento:
// - Criar/aplicar migra√ß√µes
// - Executar consultas SQL
// - Gerar tipos TypeScript
// - Gerenciar branches de desenvolvimento
// - Deploy de Edge Functions
// - Upload de arquivos para Storage
```

**IMPORTANTE:** Sempre use as ferramentas MCP do Supabase quando:
- Criar/modificar schema do database
- Aplicar migra√ß√µes durante implementa√ß√£o de tasks
- Gerar tipos TypeScript atualizados
- Testar consultas SQL
- Configurar RLS policies
- Gerenciar dados de desenvolvimento

### Componentes UI
#### Web (trainer-app)
- **UI Library:** shadcn/ui + Tailwind CSS
- **Localiza√ß√£o:** [apps/trainer-app/components/](mdc:apps/trainer-app/components)
- **SEMPRE** incluir story de teste

#### Mobile (client-app)  
- **UI Library:** React Native Paper
- **Localiza√ß√£o:** [apps/client-app/components/](mdc:apps/client-app/components)
- **SEMPRE** incluir story de teste

### Testes
- **Cobertura m√≠nima:** 80% branch coverage
- **Ferramentas:** Vitest/RTL (web) ou Jest/RTL (mobile)
- **OBRIGAT√ìRIO:** Testar edge cases
- **Localiza√ß√£o:** Pasta `tests/` por dom√≠nio

## üöÄ Templates de Prompts R√°pidos

### Componente Next.js 15
```
Gere um componente Next.js 15 responsivo usando Tailwind + shadcn/ui que [FUNCIONALIDADE]. 
Inclua testes Vitest/RTL e siga estrutura de [apps/trainer-app/](mdc:apps/trainer-app).
```

### API Route Segura
```
Escreva um route.ts para /api/[ENDPOINT] com:
- Valida√ß√£o Zod
- Autentica√ß√£o JWT 
- Rate limiting (5 req/min)
- Tipos de @fituno/types
- Estrutura Next.js 15 App Router
```

### Tela Expo
```
Crie uma screen Expo/React Native chamada [NOME] com:
- React Native Paper components
- Navega√ß√£o stack
- Formul√°rio controlado com valida√ß√£o Zod
- Teste Jest inicial
- Estrutura de [apps/client-app/](mdc:apps/client-app)
```

### Debug Hidrata√ß√£o
```
Estou recebendo 'hydration mismatch' nesta p√°gina Next.js. 
Explique causas comuns e corrija passo a passo usando Next.js 15 + RSC.
```

### Testes Unit√°rios
```
Escreva testes [Vitest/Jest]/RTL para este componente:
- Cubra edge-cases
- Alcance 80% branch coverage
- Use mocks apropriados para @fituno/services
- Siga padr√µes do projeto
```

### Mensagem de Commit
```
Com base no diff a seguir, gere um commit convencional:
- Formato: tipo(scope): descri√ß√£o
- Incluir ID da task no scope se existir
- Body detalhado se necess√°rio
- Seguir Conventional Commits
```

## ‚úÖ Definition of Done

### Crit√©rios Obrigat√≥rios
- [ ] Crit√©rios de aceite da task atendidos
- [ ] Lint sem erros (`yarn lint`)
- [ ] Testes passando (`pnpm test`)
- [ ] Cobertura de testes ‚â• 80%
- [ ] Valida√ß√£o Zod implementada (quando aplic√°vel)
- [ ] Componentes UI seguem padr√µes (shadcn/ui ou RN Paper)
- [ ] Commit criado com Conventional Commits
- [ ] Push executado

### Estrutura de Arquivos
- Respeitar organiza√ß√£o por dom√≠nio em `features/`
- Componentes UI espec√≠ficos por app
- Hooks compartilh√°veis em `packages/utils/hooks`
- Tipos globais em `packages/types`

## üîß Comandos √öteis

```bash
# Desenvolvimento
yarn dev:trainer    # Iniciar trainer-app (web)
yarn dev:client     # Iniciar client-app (mobile)

# Build
yarn build:trainer  # Build trainer-app
yarn build:client   # Build client-app  

# Qualidade
yarn lint          # Lint todos os workspaces
yarn test          # Executar testes em todos os workspaces
```

### Supabase via MCP
O agente tem acesso direto ao Supabase atrav√©s do servidor MCP configurado:

**Opera√ß√µes Dispon√≠veis:**
- üóÑÔ∏è **Database:** Criar tabelas, aplicar migra√ß√µes, executar SQL
- üîê **Auth:** Gerenciar usu√°rios e pol√≠ticas de autentica√ß√£o  
- üìÅ **Storage:** Upload/download de arquivos e media
- ‚ö° **Edge Functions:** Deploy de fun√ß√µes serverless
- üåø **Branches:** Criar branches de desenvolvimento
- üìä **Types:** Gerar tipos TypeScript do schema
- üîç **Logs:** Acessar logs dos servi√ßos
- üìñ **Docs:** Buscar documenta√ß√£o do Supabase

**Quando Usar MCP:**
- Durante implementa√ß√£o de tasks que envolvem database
- Para aplicar migra√ß√µes necess√°rias para as funcionalidades
- Gerar tipos TypeScript atualizados ap√≥s mudan√ßas no schema
- Testar consultas e validar RLS policies
- Deploy de Edge Functions para APIs customizadas

## üìÅ Refer√™ncias Importantes

- **Tasks completas:** [FITUNO_TASKS.md](mdc:FITUNO_TASKS.md)
- **Estrutura completa:** [docs/monorepo.md](mdc:docs/monorepo.md)
- **Configura√ß√£o workspaces:** [package.json](mdc:package.json)
- **Trainer app:** [apps/trainer-app/](mdc:apps/trainer-app)
- **Client app:** [apps/client-app/](mdc:apps/client-app)
- **Tipos compartilhados:** [packages/types/](mdc:packages/types)
- **Utilit√°rios:** [packages/utils/](mdc:packages/utils)
- **Servi√ßos:** [packages/services/](mdc:packages/services)
- **Constantes:** [packages/constants/](mdc:packages/constants)